import rpyc
import time

server_port = 18861
connection = None
def get_unity_connection():
    """
    Returns a connection to the Unity server. Will create a connection if none 
    exists
    """ 
    global connection
    if not connection:
        connection = UnityConnection()
        connection.connect()
    
    return connection

def execute(string_to_execute):
    """
    Executes Python code on the Unity server
    
    string_to_execute: The Python code to execute on the server 
    """
    connection = get_unity_connection()
    connection.execute(string_to_execute)
    
def get_module(module_name):
    """
    Safe way to retrieve a Python module from the Unity server.
    On the client side, the following code does not work:
        import UnityEngine
    
    Instead, client code must call
        unity_connection.get_module('UnityEngine')
    """
    connection = get_unity_connection()
    return connection.getmodule(module_name)

def reset_unity_connection():
    """
    Upon calling this function, a call to get_unity_connection() will 
    reconnect to the Unity server
    """
    global connection
    
    # Should we also explicitly disconnect the rpyc connection?
    connection = None

def log(msg):
    print('[unity_connection] %s'%msg)


class UnityConnection:
    """
    Class encapsulating the connection to the Unity server. There should only 
    be one instance of UnityConnection in the client process
    """
    def __init__(self):
        self._connection = None
    
    def connect(self):
        """
        Tries to establish a connection to the server
        """
        try:
            self._connection.ping()
            return
        except:
            self._connection = None
            
        log('Trying to connect to Unity on port {}'.format(server_port))
        try:
            self._connection = rpyc.connect('localhost', server_port)
            log('  Connected')
        except Exception, e:
            log('  Unable to connect')
            raise e

    def ensure_connect(func):
        """
        Decorator that will make sure we have a valid connection to the Unity 
        server before attempting a remote call.
        
        An exception is raised if the connection cannot be established, or if 
        the decorated function raises an exception, in which case the exception 
        will be re-raised
        """
        def func_wrapper(*args, **kwargs):
            # This might raise an exception which is handled in the connect method
            args[0].connect()

            try:                
                # connect might succeed, but the actual func might still fail
                return func(*args, **kwargs)
            except Exception as e:
                log('Call to Func failed (%s)'%e)
                raise e
        
        return func_wrapper

    @ensure_connect
    def execute(self, string_to_execute):
        """
        Executes Python code on the Unity server
        
        string_to_execute: The Python code to execute on the server 
        """
        self._connection.root.execute(string_to_execute) 

    @ensure_connect
    def getmodule(self, module_name):
        """
        Gets a module from the Unity server 
        
        module_name: The name of the module to retrieve from the server
        """
        the_module = self._connection.root.getmodule(module_name)
        return the_module
